<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHEN先生的小站</title>
  
  <subtitle>忽有故人心上过</subtitle>
  <link href="http://www.meprotoss.com/atom.xml" rel="self"/>
  
  <link href="http://www.meprotoss.com/"/>
  <updated>2024-05-06T07:23:43.685Z</updated>
  <id>http://www.meprotoss.com/</id>
  
  <author>
    <name>Mr.Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测开学习路线</title>
    <link href="http://www.meprotoss.com/undefined/cfc55e9a.html"/>
    <id>http://www.meprotoss.com/undefined/cfc55e9a.html</id>
    <published>2024-05-06T07:22:50.000Z</published>
    <updated>2024-05-06T07:23:43.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测开学习进度"><a href="#测开学习进度" class="headerlink" title="测开学习进度"></a>测开学习进度</h1><h2 id="step1-编程语言入门"><a href="#step1-编程语言入门" class="headerlink" title="step1 编程语言入门"></a>step1 编程语言入门</h2><ul><li><input checked="" disabled="" type="checkbox"> java</li></ul><h2 id="step2-基础"><a href="#step2-基础" class="headerlink" title="step2 基础"></a>step2 基础</h2><h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><ul><li><input disabled="" type="checkbox"> 数据结构与算法</li><li><input disabled="" type="checkbox"> 计算机网络</li><li><input disabled="" type="checkbox"> linux</li><li><input disabled="" type="checkbox"> mysql 重点是sql语句的编写</li></ul><h3 id="测试基础"><a href="#测试基础" class="headerlink" title="测试基础"></a>测试基础</h3><ul><li><input disabled="" type="checkbox"> 测试工具</li><li><input disabled="" type="checkbox"> 功能测试基础</li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li><input disabled="" type="checkbox"> 后端web开发</li><li><input disabled="" type="checkbox"> 自动化测试</li></ul><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><h3 id="开发项目实战"><a href="#开发项目实战" class="headerlink" title="开发项目实战"></a>开发项目实战</h3><blockquote><p>[!TIP]<br>应届校招以准备开发项目实战为佳</p></blockquote><ul><li><input disabled="" type="checkbox"> 开发实战</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测开学习进度&quot;&gt;&lt;a href=&quot;#测开学习进度&quot; class=&quot;headerlink&quot; title=&quot;测开学习进度&quot;&gt;&lt;/a&gt;测开学习进度&lt;/h1&gt;&lt;h2 id=&quot;step1-编程语言入门&quot;&gt;&lt;a href=&quot;#step1-编程语言入门&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring6</title>
    <link href="http://www.meprotoss.com/undefined/e600a460.html"/>
    <id>http://www.meprotoss.com/undefined/e600a460.html</id>
    <published>2024-05-04T14:25:18.000Z</published>
    <updated>2024-05-04T14:26:23.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring启示录"><a href="#Spring启示录" class="headerlink" title="Spring启示录"></a>Spring启示录</h2><h3 id="OCP开闭原则"><a href="#OCP开闭原则" class="headerlink" title="OCP开闭原则"></a>OCP开闭原则</h3><p>在软件开发过程中应当对扩展开放，对修改关闭</p><h3 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h3><ul><li><p>Dependence Inversion Principle(DIP) </p></li><li><p>要倡导面向抽象编程，面向接口编程，不要面向具体编程，让上层不再依赖下层，下面改动了，上面的代码不会受到牵连。这样可以大大降低程序的耦合度，耦合度低了，扩展力就强了，同时代码复用性也会增强。（软件七大开发原则都是在为解耦合服务）</p></li><li><p>Spring框架可以帮助我们创建对象，并且可以帮助我们维护对象和对象之间的关系</p></li><li><p>Spring其实就是一个管理Bean对象的工厂</p></li></ul><h3 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h3><ul><li>Inversion of Control(IoC)</li></ul><p>控制反转的核心是：将对象的创建权交出去，将对象和对象之间关系的管理权交出去，由第三方容器来负责创建与维护。</p><ul><li>控制反转常见的实现方式：依赖注入（Dependency Injection，简称DI。</li></ul><h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><p>spring &#x3D; IOC + AOP(面向切面编程)</p><h3 id="Spring8大模块"><a href="#Spring8大模块" class="headerlink" title="Spring8大模块"></a>Spring8大模块</h3><h3 id="Spring-特点"><a href="#Spring-特点" class="headerlink" title="Spring 特点"></a>Spring 特点</h3><ol><li>轻量<br>  a. 小<br>  b. 非侵入式：Spring应用中的对象不依赖于Spring的特定类，也就是说 我们自己创建的对象不依赖spring容器</li><li>IoC</li><li>面向切面(AOP)</li><li>容器<br> Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。</li><li>框架<br> Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。</li></ol><h2 id="Spring-入门程序"><a href="#Spring-入门程序" class="headerlink" title="Spring 入门程序"></a>Spring 入门程序</h2><h3 id="第一个Spring程序"><a href="#第一个Spring程序" class="headerlink" title="第一个Spring程序"></a>第一个Spring程序</h3><ul><li><p>Spring的配置文件：beans.xml 放在类的根路径下。<br>配置文件中进行bean的配置</p><ul><li>id属性：代表对象的唯一标识。</li><li>class属性:用来指定要创建的java类的类名，这个类名必须是全限定类名（包含包名</li></ul></li><li><p>Spring是通过反射机制调用类的无参构造方法来创建对象的。</p></li></ul><h3 id="Spring6-启用Log4j2日志框架"><a href="#Spring6-启用Log4j2日志框架" class="headerlink" title="Spring6 启用Log4j2日志框架"></a>Spring6 启用Log4j2日志框架</h3><p>第一步：引入Log4j2的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步：在类的根路径下提供log4j2.xml配置文件（文件名固定为：log4j2.xml，文件必须放到类根路径下。）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            level指定日志级别，从低到高的优先级：</span></span><br><span class="line"><span class="comment">                ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;spring6log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;spring6log&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三步：使用日志框架</p><h2 id="四、Spring对IoC的实现"><a href="#四、Spring对IoC的实现" class="headerlink" title="四、Spring对IoC的实现"></a>四、Spring对IoC的实现</h2><h3 id="IoC控制反转"><a href="#IoC控制反转" class="headerlink" title="IoC控制反转"></a>IoC控制反转</h3><ul><li><p>控制反转是一种思想。</p></li><li><p>控制反转是为了降低程序耦合度，提高程序扩展力，达到OCP原则，达到DIP原则。</p></li><li><p>控制反转，反转的是什么？</p><ul><li><p>将对象的创建权利交出去，交给第三方容器负责。</p></li><li><p>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</p></li></ul></li><li><p>控制反转这种思想如何实现呢？</p><ul><li>DI（Dependency Injection）：依赖注入</li></ul></li></ul><h3 id="IoC依赖注入"><a href="#IoC依赖注入" class="headerlink" title="IoC依赖注入"></a>IoC依赖注入</h3><p>依赖注入实现了控制反转的思想。</p><p>Spring通过依赖注入的方式来完成Bean管理的。</p><p>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。</p><p>依赖注入：</p><ul><li><p>依赖指的是对象和对象之间的关联关系。</p></li><li><p>注入指的是一种数据传递行为，通过注入行为来让对象和对象产生关系。</p></li></ul><p>依赖注入常见的实现方式包括两种：</p><p>set注入:基于<strong>set方法</strong>实现，底层通过反射机制调用属性对应的set方法然后给属性赋值。因此这种方法要求属性必须对外暴露set方法。</p><p>总结：set注入的核心实现原理：通过反射机制调用set方法来给属性赋值，让两个对象之间产生关系。</p><p>构造注入:通过调用<strong>构造方法</strong>来给属性赋值。</p><p>通过测试得知，通过构造方法注入的时候：</p><ul><li>可以通过下标</li><li>可以通过参数名</li><li>也可以不指定下标和参数名，可以类型自动推断。</li></ul><h3 id="p命名空间注入"><a href="#p命名空间注入" class="headerlink" title="p命名空间注入"></a>p命名空间注入</h3><p>p命名空间注入是基于setter方法的，所以需要对应的属性提供setter方法。</p><h3 id="c命名空间注入"><a href="#c命名空间注入" class="headerlink" title="c命名空间注入"></a>c命名空间注入</h3><p>c命名空间是简化构造方法注入的,需要提供构造方法</p><ul><li>注意：不管是p命名空间还是c命名空间，注入的时候都可以注入简单类型以及非简单类型。</li></ul><h3 id="util命名空间"><a href="#util命名空间" class="headerlink" title="util命名空间"></a>util命名空间</h3><p>使用util命名空间可以让配置复用。</p><h3 id="基于XML的自动装配"><a href="#基于XML的自动装配" class="headerlink" title="基于XML的自动装配"></a>基于XML的自动装配</h3><p>Spring还可以完成自动化的注入，自动化注入又被称为自动装配。它可以根据名字进行自动装配，也可以根据类型进行自动装配。</p><p>如果根据名称装配(byName)，底层会调用set方法进行注入。<br>例如：setAge() 对应的名字是age，setPassword()对应的名字是password，setEmail()对应的名字是email。</p><p>当byType进行自动装配的时候，配置文件中某种类型的Bean必须是唯一的</p><h3 id="Spring-引入外部配置文件"><a href="#Spring-引入外部配置文件" class="headerlink" title="Spring 引入外部配置文件"></a>Spring 引入外部配置文件</h3><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><h3 id="单例-singleton"><a href="#单例-singleton" class="headerlink" title="单例 singleton"></a>单例 singleton</h3><p>默认情况下，Spring的IoC容器创建的Bean对象是单例的。</p><p>Bean对象的创建是在初始化Spring上下文的时候就完成的。</p><h3 id="多例-prototype"><a href="#多例-prototype" class="headerlink" title="多例 prototype"></a>多例 prototype</h3><p>如果想让Spring的Bean对象以多例的形式存在，可以在bean标签中指定scope属性的值为：prototype</p><p>scope如果没有配置，它的默认值是什么呢？默认值是singleton，单例的。</p><h3 id="其他scope"><a href="#其他scope" class="headerlink" title="其他scope"></a>其他scope</h3><h2 id="Gof-gang-of-four-之工厂模式"><a href="#Gof-gang-of-four-之工厂模式" class="headerlink" title="Gof (gang of four) 之工厂模式"></a>Gof (gang of four) 之工厂模式</h2><p>设计模式: 一种可以被重复利用的方案</p><p>工厂模式是解决对象创建问题的，所以工厂模式属于创建型设计模式。这里为什么学习工厂模式呢？这是因为Spring框架底层使用了大量的工厂模式。</p><p>GoF23种设计模式可分为三大类:</p><ul><li>创建型（5个）：解决对象创建问题。</li><li>结构型(7个)：一些类或对象组合在一起的经典结构。</li><li>行为型（11个）：解决类或对象之间的交互问题。</li></ul><h3 id="工厂模式的三种形态"><a href="#工厂模式的三种形态" class="headerlink" title="工厂模式的三种形态"></a>工厂模式的三种形态</h3><ol><li>简单工厂模式（Simple Factory）：不属于23种设计模式之一。简单工厂模式又叫做：静态 工厂方法模式。简单工厂模式是工厂方法模式的一种特殊实现。</li><li>工厂方法模式（Factory Method）：是23种设计模式之一。</li><li>抽象工厂模式（Abstract Factory）：是23种设计模式之一。</li></ol><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>单工厂模式的角色包括三个：</p><ol><li>抽象产品角色</li><li>具体产品角色</li><li>工厂类角色</li></ol><p>抽象产品角色：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 武器（抽象产品角色）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Weapon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的武器都有攻击行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体产品角色：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克（具体产品角色）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Tank</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tank</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;坦克开炮！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 战斗机（具体产品角色）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Fighter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fighter</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;战斗机投下原子弹！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匕首（具体产品角色）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Dagger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dagger</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;砍他丫的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>工厂类角色：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂类角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> WeaponFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeaponFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据不同的武器类型生产武器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weaponType 武器类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 武器对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Weapon <span class="title function_">get</span><span class="params">(String weaponType)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weaponType == <span class="literal">null</span> || weaponType.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;TANK&quot;</span>.equals(weaponType)) &#123;</span><br><span class="line">            weapon = <span class="keyword">new</span> <span class="title class_">Tank</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;FIGHTER&quot;</span>.equals(weaponType)) &#123;</span><br><span class="line">            weapon = <span class="keyword">new</span> <span class="title class_">Fighter</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;DAGGER&quot;</span>.equals(weaponType)) &#123;</span><br><span class="line">            weapon = <span class="keyword">new</span> <span class="title class_">Dagger</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不支持该武器！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> weapon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试程序（客户端程序）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon1</span> <span class="operator">=</span> WeaponFactory.get(<span class="string">&quot;TANK&quot;</span>);</span><br><span class="line">        weapon1.attack();</span><br><span class="line"></span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon2</span> <span class="operator">=</span> WeaponFactory.get(<span class="string">&quot;FIGHTER&quot;</span>);</span><br><span class="line">        weapon2.attack();</span><br><span class="line"></span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon3</span> <span class="operator">=</span> WeaponFactory.get(<span class="string">&quot;DAGGER&quot;</span>);</span><br><span class="line">        weapon3.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="set-注入-主要应用"><a href="#set-注入-主要应用" class="headerlink" title="set 注入(主要应用)"></a>set 注入(主要应用)</h3><ul><li><input disabled="" type="checkbox"> set注入的核心实现原理：通过反射机制调用set方法来给属性赋值，让两个对象之间产生关系。</li><li><input disabled="" type="checkbox"> property标签的name是：setUserDao()方法名演变得到的</li><li><input disabled="" type="checkbox"> 注入外部bean</li></ul><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 外部Bean的特点：bean定义到外面，在property标签中使用ref属性进行注入。通常这种方式是常用。 [ ] 注入内部bean</li></ul></blockquote></blockquote><ul><li><input disabled="" type="checkbox"> 注入简单类型</li></ul><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 如果给简单类型赋值，使用value属性或value标签。而不是ref。</li><li><input disabled="" type="checkbox"> 简单类型包括哪些呢？</li></ul></blockquote></blockquote><ul><li>基本数据类型</li><li>基本数据类型对应的包装类</li><li>String或其他的CharSequence子类</li><li>Number子类</li><li>Date子类</li><li>Enum子类</li><li>URI</li><li>URL</li><li>Temporal子类</li><li>Locale</li><li>Class</li><li>另外还包括以上简单值类型对应的数组类型<blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 需要注意的是：</li></ul></blockquote></blockquote></li><li>如果把Date当做简单类型的话，日期字符串格式不能随便写。格式必须符合Date的toString()方法格式。显然这就比较鸡肋了。如果我们提供一个这样的日期字符串：2010-10-11，在这里是无法赋值给Date类型的属性的。</li><li>spring6之后，当注入的是URL，那么这个url字符串是会进行有效性检测的。如果是一个存在的url，那就没问题。如果不存在则报错。</li></ul><hr><ul><li><input disabled="" type="checkbox"> 级联属性赋值</li></ul><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 要点：</li></ul></blockquote></blockquote><ul><li><p>在spring配置文件中，如上，注意顺序。</p></li><li><p>在spring配置文件中，clazz属性必须提供getter方法。</p></li><li><p><input disabled="" type="checkbox"> 注入数组<br>要点：</p></li><li><p>如果数组中是简单类型，使用value标签。</p></li><li><p>如果数组中是非简单类型，使用ref标签。</p></li><li><p><input disabled="" type="checkbox"> 注入list集合(有序可重复)</p><ul><li>同上，只要把array标签改为list</li><li>注意：注入List集合的时候使用list标签，如果List集合中是简单类型使用value标签，反之使用ref标签。</li></ul></li><li><p><input disabled="" type="checkbox"> 注入set集合(无序不可重复)</p><ul><li><p>使用<code>&lt;set&gt;</code>标签</p></li><li><p>set集合中元素是简单类型的使用value标签，反之使用ref标签。</p></li><li><p><input disabled="" type="checkbox"> 注入map集合<br>要点：</p></li><li><p>使用<code>&lt;map&gt;</code>标签</p></li><li><p>如果key是简单类型，使用 key 属性，反之使用 key-ref 属性。</p></li><li><p>如果value是简单类型，使用 value 属性，反之使用 value-ref 属性。</p></li><li><p><input disabled="" type="checkbox"> p命名空间注入</p></li></ul><p>使用p命名空间注入的前提条件包括两个：</p><ul><li><p>第一：在XML头部信息中添加p命名空间的配置信息：xmlns:p&#x3D;”<a href="http://www.springframework.org/schema/p">http://www.springframework.org/schema/p</a>“</p></li><li><p>第二：p命名空间注入是基于setter方法的，所以需要对应的属性提供setter方法。</p></li><li><p><input disabled="" type="checkbox"> c命名空间注入</p></li></ul><p>c命名空间是简化构造方法注入的。</p><ul><li><p>使用c命名空间的两个前提条件：<br>第一：需要在xml配置文件头部添加信息：xmlns:c&#x3D;”<a href="http://www.springframework.org/schema/c">http://www.springframework.org/schema/c</a>“</p></li><li><p>第二：需要提供构造方法。</p></li><li><p><input disabled="" type="checkbox"> util 命名空间</p></li><li><p>使用util命名空间可以让配置复用。</p></li></ul></li></ul><h3 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h3><ul><li><p><input disabled="" type="checkbox"> 通过测试得知，通过构造方法注入的时候</p></li><li><p>可以通过下标</p></li><li><p>可以通过参数名</p></li><li><p>也可以不指定下标和参数名，可以类型自动推断。</p></li><li><p>spring在装配方面做的还是比较健壮的</p></li></ul><h3 id="基于XML的自动装配-1"><a href="#基于XML的自动装配-1" class="headerlink" title="基于XML的自动装配"></a>基于XML的自动装配</h3><ul><li><p><input disabled="" type="checkbox"> 根据名称自动装配</p></li><li><p>Spring还可以完成自动化的注入，自动化注入又被称为自动装配。它可以根据名字进行自动装配，也可以根据类型进行自动装配</p></li><li><p>这说明，如果根据名称装配(byName)，底层会调用set方法进行注入。<br>例如：setAge() 对应的名字是age，setPassword()对应的名字是password，setEmail()对应的名字是email。</p></li><li><p><input disabled="" type="checkbox"> 根据类型自动装配</p></li><li><p>配置文件中某种类型的Bean必须是唯一的，不能出现多个。</p></li></ul><h3 id="spring引入外部属性配置文件"><a href="#spring引入外部属性配置文件" class="headerlink" title="spring引入外部属性配置文件"></a>spring引入外部属性配置文件</h3><h3 id="Bean的作用域-1"><a href="#Bean的作用域-1" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><ul><li><p><input disabled="" type="checkbox"> Spring的IoC容器中，默认情况下，Bean对象是单例的</p></li><li><p><input disabled="" type="checkbox"> 默认情况下，Bean对象的创建是在初始化Spring上下文的时候就完成的</p></li><li><p><input disabled="" type="checkbox"> 如果想让Spring的Bean对象以多例的形式存在，可以在bean标签中指定scope属性的值为：prototype，<strong>这样Spring会在每一次执行getBean()方法的时候创建Bean对象</strong>，调用几次则创建几次。</p></li><li><p>scope属性的值不止两个，它一共包括8个选项：</p></li><li><p>singleton：默认的，单例。</p></li><li><p>prototype：原型。每调用一次getBean()方法则获取一个新的Bean对象。或每次注入的时候都是新对象。</p></li><li><p>request：一个请求对应一个Bean。仅限于在WEB应用中使用。</p></li><li><p>session：一个会话对应一个Bean。仅限于在WEB应用中使用。</p></li><li><p>global session：portlet应用中专用的。如果在Servlet的WEB应用中使用global session的话，和session一个效果。（portlet和servlet都是规范。servlet运行在servlet容器中，例如Tomcat。portlet运行在portlet容器中。）</p></li><li><p>application：一个应用对应一个Bean。仅限于在WEB应用中使用。</p></li><li><p>websocket：一个websocket生命周期对应一个Bean。仅限于在WEB应用中使用。</p></li><li><p>自定义scope：很少使用。</p></li></ul><h3 id="Gof-FactoryMode-工厂模式"><a href="#Gof-FactoryMode-工厂模式" class="headerlink" title="Gof FactoryMode 工厂模式"></a>Gof FactoryMode 工厂模式</h3><ul><li><input disabled="" type="checkbox"> 简单工厂模式</li></ul><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 简单工厂模式的优点：</li></ul></blockquote></blockquote><ul><li><p>客户端程序不需要关心对象的创建细节，需要哪个对象时，只需要向工厂索要即可，初步实现了责任的分离。客户端只负责“消费”，工厂负责“生产”。生产和消费分离。</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 简单工厂模式的缺点：</li></ul></blockquote></blockquote></li><li><p>缺点1：工厂类集中了所有产品的创造逻辑，形成一个无所不知的全能类，有人把它叫做上帝类。显然工厂类非常关键，不能出问题，一旦出问题，整个系统瘫痪。</p></li><li><p>缺点2：不符合OCP开闭原则，在进行系统扩展时，需要修改工厂类。Spring中的BeanFactory就使用了简单工厂模式。</p></li><li><p><input disabled="" type="checkbox"> 工厂方法模式</p></li></ul><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 工厂方法模式既保留了简单工厂模式的优点，同时又解决了简单工厂模式的缺点。<br>工厂方法模式的角色包括：</li></ul></blockquote></blockquote><ul><li>抽象工厂角色</li><li>具体工厂角色</li><li>抽象产品角色</li><li>具体产品角色</li></ul><h2 id="Bean的实例化方式"><a href="#Bean的实例化方式" class="headerlink" title="Bean的实例化方式"></a>Bean的实例化方式</h2><h3 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1. 构造方法"></a>1. 构造方法</h3><ul><li><input disabled="" type="checkbox"> 在配置文件中配置类的全路径，spirng直接调用该类的无参构造方法获取bean对象</li></ul><h3 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2. 简单工厂模式"></a>2. 简单工厂模式</h3><ul><li><input disabled="" type="checkbox"> 通过简单工厂模式，调用<code>工厂</code>的静态方法<code>get()</code>获取bean对象</li><li><input disabled="" type="checkbox"> 工厂类里的方法是静态方法，所以不需要spring工厂的实例</li></ul><h3 id="3-通过factory-bean实例化-本质上是工厂方法模式"><a href="#3-通过factory-bean实例化-本质上是工厂方法模式" class="headerlink" title="3. 通过factory-bean实例化(本质上是工厂方法模式)"></a>3. 通过factory-bean实例化(本质上是工厂方法模式)</h3><ul><li><input disabled="" type="checkbox"> 工厂类里的方法是非静态方法，所工厂类也必须被spring管理起来</li><li><input disabled="" type="checkbox"> 标签也要多一个 因为得告诉spring是创建哪个<code>工厂</code> 的 哪个<code>对象</code><br>所以得指定哪个对象(factory-bean)的哪个方法(factory-method)</li></ul><h3 id="4-通过FactoryBean接口实例化"><a href="#4-通过FactoryBean接口实例化" class="headerlink" title="4. 通过FactoryBean接口实例化"></a>4. 通过FactoryBean接口实例化</h3><ul><li><input disabled="" type="checkbox"> 只要实现接口和接口的抽象方法 就可以不需要指定factory-bean 和<br>factory-method。是对第三种方法的简化</li><li><input disabled="" type="checkbox"> 因为实现了接口所以直接认为你这个类的对象就是一个豆子<br>td因为实现了接口所以直接认为你这个类的对象就是一个豆子</li></ul><h3 id="BeanFactory-和-FactoryBean-的区别"><a href="#BeanFactory-和-FactoryBean-的区别" class="headerlink" title="BeanFactory 和 FactoryBean 的区别"></a>BeanFactory 和 FactoryBean 的区别</h3><ul><li><p><input disabled="" type="checkbox"> BeanFactory</p></li><li><p>Spring IoC容器的顶级对象，BeanFactory被翻译为“Bean工厂”，在Spring的IoC容器中，“Bean工厂”负责创建Bean对象。<br>BeanFactory是工厂。</p></li><li><p><input disabled="" type="checkbox"> FactoryBean</p></li><li><p>它是一个<strong>Bean</strong>，是一个能够辅助Spring实例化其它Bean对象的一个Bean。<br>在Spring中，Bean可以分为两类：<br>● 第一类：普通Bean<br>● 第二类：工厂Bean（记住：工厂Bean也是一种Bean，只不过这种Bean比较特殊，它可以辅助Spring实例化其它Bean对象。）</p></li></ul><h3 id="注入自定义-Date-工厂Bean的实际应用"><a href="#注入自定义-Date-工厂Bean的实际应用" class="headerlink" title="注入自定义 Date (工厂Bean的实际应用)"></a>注入自定义 Date (工厂Bean的实际应用)</h3><h3 id="Bean-的生命周期-可分为5步7步10步-也就是bean对象从开始创建到消亡的整个过程"><a href="#Bean-的生命周期-可分为5步7步10步-也就是bean对象从开始创建到消亡的整个过程" class="headerlink" title="Bean 的生命周期(可分为5步7步10步)(也就是bean对象从开始创建到消亡的整个过程)"></a>Bean 的生命周期(可分为5步7步10步)(也就是bean对象从开始创建到消亡的整个过程)</h3><ul><li><input disabled="" type="checkbox"> 当想在具体某个生命周期做指定操作时可以用到</li><li>第一步：实例化Bean</li><li>第二步：Bean属性赋值</li><li>第三步：初始化Bean 需要手动指定 使用init-method标签<br>** bean后处理器的before方法</li><li>第四步：使用Bean<br>** bean后处理器的after方法</li><li>第五步：销毁Bean 使用手动指定 用destory-method标签</li></ul><h3 id="Bean的作用域不同，管理方式不同"><a href="#Bean的作用域不同，管理方式不同" class="headerlink" title="Bean的作用域不同，管理方式不同"></a>Bean的作用域不同，管理方式不同</h3><ul><li>对于singleton作用域的Bean，Spring 能够精确地知道该Bean何时被创建，何时初始化完成，以及何时被销毁；</li><li>而对于 prototype 作用域的 Bean，Spring 只负责创建，当容器创建了<br>Bean 的实例后，Bean 的实例就交给客户端代码管理，Spring 容器将不再跟踪其生命周期。</li></ul><h3 id="自己new的对象可以让Spring管理"><a href="#自己new的对象可以让Spring管理" class="headerlink" title="自己new的对象可以让Spring管理"></a>自己new的对象可以让Spring管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterBeanTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanRegister</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">// 自己new的对象</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      System.out.println(user);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建 默认可列表BeanFactory 对象</span></span><br><span class="line">      <span class="type">DefaultListableBeanFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">      <span class="comment">// 注册Bean</span></span><br><span class="line">      factory.registerSingleton(<span class="string">&quot;userBean&quot;</span>, user);</span><br><span class="line">      <span class="comment">// 从spring容器中获取bean</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> factory.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">      System.out.println(userBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bean的循环依赖问题"><a href="#Bean的循环依赖问题" class="headerlink" title="Bean的循环依赖问题"></a>Bean的循环依赖问题</h2><h3 id="singleton-set注入"><a href="#singleton-set注入" class="headerlink" title="singleton + set注入"></a><code>singleton</code> + set注入</h3><p>循环依赖没有问题,解决方法如下:</p><ul><li><input disabled="" type="checkbox"> spring容器一旦将bean创建出来就立刻进行<code>曝光</code><br>(不赋值就告诉大家我可以被使用啦！！)</li><li><input disabled="" type="checkbox"> 曝光之后再进行赋值</li></ul><h3 id="prototype-set注入"><a href="#prototype-set注入" class="headerlink" title="prototype + set注入"></a><code>prototype</code> + set注入</h3><ul><li><input disabled="" type="checkbox"> 当循环依赖的 <strong>所有</strong> Bean的scope&#x3D;”prototype”的时候，产生的循环依赖，Spring是无法解决的，会出现BeanCurrentlyInCreationException异常。<blockquote><blockquote><ul><li><input disabled="" type="checkbox"> new ClassPathApplicationContext的时候不会new对象<br>，只有在getBean的时候才会创建对象,会无限递归</li></ul></blockquote></blockquote></li><li><input disabled="" type="checkbox"> 当循环依赖的一个是单例时，就不会出现问题</li></ul><h3 id="singleton-prototype-构造注入"><a href="#singleton-prototype-构造注入" class="headerlink" title="singleton&#x2F;prototype+ 构造注入"></a><code>singleton</code>&#x2F;<code>prototype</code>+ 构造注入</h3><ul><li><input disabled="" type="checkbox"> 有异常，因为创建对象和给属性赋值是同时进行的，不给属性赋值对象就创建不出来</li></ul><h3 id="Spring解决循环依赖的机理"><a href="#Spring解决循环依赖的机理" class="headerlink" title="Spring解决循环依赖的机理"></a>Spring解决循环依赖的机理</h3><ul><li><input disabled="" type="checkbox"> Spring只能解决setter方法注入的单例bean之间的循环依赖。<br>ClassA依赖ClassB，ClassB又依赖ClassA，形成依赖闭环。<br>Spring在创建ClassA对象后，不需要等给属性赋值，直接将其曝光到bean缓存当中。在解析ClassA的属性时，又发现依赖于ClassB，再次去获取ClassB，当解析ClassB的属性时，又发现需要ClassA的属性，但此时的ClassA已经被提前曝光加入了正在创建的bean的缓存中，则无需创建新的的ClassA的实例，直接从缓存中获取即可。从而解决循环依赖问题。</li></ul><h2 id="回顾反射机制"><a href="#回顾反射机制" class="headerlink" title="回顾反射机制"></a>回顾反射机制</h2><h3 id="方法调用的四个要素"><a href="#方法调用的四个要素" class="headerlink" title="方法调用的四个要素"></a>方法调用的四个要素</h3><ul><li>哪个对象 </li><li>哪个方法 </li><li>哪个参数</li><li>返回什么值</li></ul><h2 id="全注解式开发"><a href="#全注解式开发" class="headerlink" title="全注解式开发"></a>全注解式开发</h2><h3 id="负责声明bean的注解"><a href="#负责声明bean的注解" class="headerlink" title="负责声明bean的注解"></a>负责声明bean的注解</h3><ul><li>@Component</li><li>@Controller</li><li>@Service</li><li>@Repository</li></ul><p>@Controller、@Service、@Repository这三个注解都是@Component注解的别名。其实这四个注解的功能一样，但是为了增强程序的可读性</p><ul><li>控制器类上使用：Controller</li><li>service类上使用：Service</li><li>dao类上使用：Repository</li></ul><p>他们都是只有一个value属性。value属性用来指定bean的id，也就是bean的名字。</p><h3 id="spring注解的使用"><a href="#spring注解的使用" class="headerlink" title="spring注解的使用"></a>spring注解的使用</h3><ol><li>加入AOP依赖(一般会加入spring-context依赖后会关联加入，所以这一步不用做)</li><li>配置文件中配置context命名空间</li><li>配置包扫描</li><li>Bean上使用注解</li></ol><blockquote><p>[!TIP]<br>如果注解的属性名是value，那么可以省略<br>  如果把value属性彻底去掉，spring会被Bean自动取名，并且默认名字的规律是：Bean类名首字母小写后面不变。</p></blockquote><p>如果是多个包怎么办？有两种解决方案：</p><ul><li>第一种：在配置文件中指定多个包，用逗号隔开。</li><li>第二种：指定多个包的共同父包。</li></ul><h3 id="选择性实例化Bean"><a href="#选择性实例化Bean" class="headerlink" title="选择性实例化Bean"></a>选择性实例化Bean</h3><p>假设在某个包下有很多Bean，有的Bean上标注了Component，有的标注了Controller，有的标注了Service，有的标注了Repository，现在由于某种特殊业务的需要，只允许其中所有的Controller参与Bean管理</p><ul><li>修改配置文件就行，用到再去查</li></ul><h3 id="负责注入的注解"><a href="#负责注入的注解" class="headerlink" title="负责注入的注解"></a>负责注入的注解</h3><p>@Component @Controller @Service @Repository 这四个注解是用来<strong>声明</strong>Bean的，声明后这些Bean将被实例化。接下来我们看一下，如何给Bean的属性赋值。给Bean属性<strong>赋值</strong>需要用到这些注解：</p><ul><li><p>@Value 负责注入简单类型</p><ul><li>@Value注解可以直接使用在属性上，也可以使用在setter方法上,以及构造方法的形参上。</li><li>为了简化代码，以后我们一般不提供setter方法，直接在属性上使用@Value注解完成属性赋值。</li></ul></li><li><p>@Autowired 单独使用@Autowired注解，默认根据类型装配。【默认是byType】</p><ul><li>@Autowired注解可以用来注入非简单类型。被翻译为：自动连线的，或者自动装配。单独使用@Autowired注解，默认根据类型装配。【默认是byType】</li><li>当有参数的构造方法只有一个时，@Autowired注解可以省略。如果有多个构造方法，@Autowired肯定是不能省略的。</li><li>可以直接使用在属性上，也可以使用在setter方法上,以及构造方法、构造方法参数上</li></ul></li><li><p>如一个要装配的接口有不止一个实现类，则配合@Qualified使用才能byName进行装配</p></li><li><p>@Resource注解默认根据属性名进行装配。</p><ul><li>@Resource注解也可以完成非简单类型注入。</li><li>与@Autowired注解的区别：<ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。</li><li>@Autowired注解是Spring框架自己的。</li><li>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul></li></ul></li></ul><h2 id="GOF代理模式"><a href="#GOF代理模式" class="headerlink" title="GOF代理模式"></a>GOF代理模式</h2><h3 id="对代理模式的理解"><a href="#对代理模式的理解" class="headerlink" title="对代理模式的理解"></a>对代理模式的理解</h3><p>代理模式中有一个非常重要的特点：对于客户端程序来说，使用代理对象时就像在使用目标对象一样。【在程序中，目标需要被保护时】</p><p>代理模式是GoF23种设计模式之一。属于结构型设计模式。</p><p>代理模式的作用是：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用一个对象，此时可以通过一个称之为“代理”的第三者来实现间接引用。代理对象可以在客户端和目标对象之间起到<strong>中介</strong>的作用，并且可以通过代理对象去掉客户不应该看到的内容和服务或者添加客户需要的额外服务。 通过<strong>引入一个新的对象</strong>来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，<strong>通过引入代理对象来间接访问一个对象</strong>，这就是代理模式的模式动机。<br>代理模式中的角色：</p><ul><li>代理类（代理主题）</li><li>目标类（真实主题）</li><li>代理类和目标类的公共接口（抽象主题）：客户端在使用代理类时就像在使用目标类，不被客户端所察觉，所以代理类和目标类要有共同的行为，也就是实现共同的接口。</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在内存当中动态生成类的技术常见的包括：</p><ul><li>JDK动态代理技术：只能代理接口。</li><li>CGLIB动态代理技术：CGLIB(Code Generation Library)是一个开源项目。是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。它既可以代理接口，又可以代理类，底层是通过<strong>继承</strong>的方式实现的,因此被代理的目标类不能用<code>final</code>修饰。性能比JDK动态代理要好。（底层有一个小而快的字节码处理框架ASM。）</li><li>Javassist动态代理技术：Javassist是一个开源的分析、编辑和创建Java字节码的类库。是由东京工业大学的数学和计算机科学系的 Shigeru Chiba （千叶 滋）所创建的。它已加入了开放源代码JBoss 应用服务器项目，通过使用Javassist对字节码操作为JBoss实现动态”AOP”框架。</li></ul><h3 id="静态代理和动态代理的区别"><a href="#静态代理和动态代理的区别" class="headerlink" title="静态代理和动态代理的区别"></a>静态代理和动态代理的区别</h3><p>静态代理和动态代理都是在面向对象编程中常见的设计模式，它们都允许一个对象在另一个对象的基础上提供额外的功能。它们的主要区别在于代理类的创建时间和绑定方式。</p><ol><li>静态代理：<br>静态代理是在编译时就已经确定了的代理关系。在静态代理中，代理类在编译期间就已经创建好，并且代理类和被代理类的关系在编译时确定，不能动态改变。</li></ol><p>特点：<br>代理类和被代理类在编译期间确定。<br>需要为每一个被代理类编写一个对应的代理类。<br>编译时就已确定代理关系，不灵活。</p><ol start="2"><li>动态代理：<br>动态代理是在运行时创建的代理对象，代理类在程序运行时动态生成，而不是在编译期间确定。Java 中的动态代理主要是通过 java.lang.reflect.Proxy 类来实现。</li></ol><p>特点：<br>代理类是在运行时动态生成的。<br>不需要为每一个被代理类编写一个对应的代理类，可以通过反射机制动态处理。<br>在运行时可以动态改变代理关系，更加灵活。</p><p>应用场景：</p><ul><li>静态代理： 适用于被代理类较少且不需要频繁变更代理关系的情况，比如安全检查、日志记录等。</li><li>动态代理： 适用于被代理类较多或者代理关系需要经常变更的情况，比如 AOP（面向切面编程）、RPC（远程过程调用）等。</li></ul><p>总的来说，动态代理相对于静态代理更加灵活，因为它允许在运行时动态生成代理对象，而无需在编译时确定。这使得动态代理在一些需要动态管理和调整代理关系的场景下更为实用。</p><h2 id="面向切面编程的AOP-Aspect-Oriented-Programming"><a href="#面向切面编程的AOP-Aspect-Oriented-Programming" class="headerlink" title="面向切面编程的AOP(Aspect Oriented Programming)"></a>面向切面编程的AOP(Aspect Oriented Programming)</h2><ul><li>AOP底层使用的是动态代理实现</li><li>Spring的AOP使用的动态代理是：JDK动态代理 + CGLIB动态代理技术。Spring在这两种动态代理中灵活切换，如果是代理接口，会默认使用JDK动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用CGLIB</li></ul><h3 id="AOP介绍"><a href="#AOP介绍" class="headerlink" title="AOP介绍"></a>AOP介绍</h3><p>一般一个系统当中都会有一些系统服务，例如：日志、事务管理、安全等。这些系统服务被称为：交叉业务</p><p>如果在每一个业务处理过程当中，都掺杂这些交叉业务代码进去的话，存在两方面问题：</p><ul><li><p>第一：交叉业务代码在多个业务流程中反复出现，显然这个交叉业务代码没有得到复用。并且修改这些交叉业务代码的话，需要修改多处。</p></li><li><p>第二：程序员无法专注核心业务代码的编写，在编写核心业务代码的同时还需要处理这些交叉业务。</p></li><li><p>用一句话总结AOP：将与核心业务无关的代码独立的抽取出来，形成一个独立的组件，然后以横向交叉的方式应用到业务流程当中的过程被称为AOP。</p></li></ul><p>AOP的优点:</p><ul><li>第一：代码复用性增强。</li><li>第二：代码易维护。</li><li>第三：使开发者更关注业务逻辑。</li></ul><h3 id="AOP七大术语"><a href="#AOP七大术语" class="headerlink" title="AOP七大术语"></a>AOP七大术语</h3><ul><li><p><input disabled="" type="checkbox"> 切面：程序中和业务逻辑没有关系的通用代码(交叉业务)</p><ul><li><p><input disabled="" type="checkbox"> 连接点 Joinpoint</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 在程序的整个执行流程中，可以织入切面的位置。方法的执行前后，异常抛出之后等位置。</li></ul></blockquote></blockquote></li><li><p><input disabled="" type="checkbox"> 切点 Pointcut</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 在程序执行流程中，真正织入切面的方法。（一个切点对应多个连接点）</li></ul></blockquote></blockquote></li><li><p><input disabled="" type="checkbox"> 通知 Advice</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 通知又叫增强，就是具体你要织入的代码。</li></ul></blockquote></blockquote></li><li><p><input disabled="" type="checkbox"> 切面Aspect</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 切点 + 通知就是切面。</li></ul></blockquote></blockquote></li><li><p><input disabled="" type="checkbox"> 织入 Weaving</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 把通知应用到目标对象上的过程。</li></ul></blockquote></blockquote></li><li><p><input disabled="" type="checkbox"> 代理对象 Proxy</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 一个目标对象被织入通知后产生的新对象。</li></ul></blockquote></blockquote></li><li><p><input disabled="" type="checkbox"> 目标对象 Target</p><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 被织入通知的对象。</li></ul></blockquote></blockquote></li></ul></li></ul><p> 切点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表) [异常])</span><br></pre></td></tr></table></figure><h3 id="使用Spring的AOP"><a href="#使用Spring的AOP" class="headerlink" title="使用Spring的AOP"></a>使用Spring的AOP</h3><h4 id="切面的先后顺序"><a href="#切面的先后顺序" class="headerlink" title="切面的先后顺序"></a>切面的先后顺序</h4><ul><li><input disabled="" type="checkbox"> 可以使用@Order注解来标识切面类，为@Order注解的value指定一个整数型的数字，数字越小，优先级越高。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(1)</span> <span class="comment">//设置优先级</span></span><br></pre></td></tr></table></figure><h4 id="通用切点"><a href="#通用切点" class="headerlink" title="通用切点"></a>通用切点</h4><ul><li>将切点表达式单独的定义出来，在需要的位置引入即可</li></ul><h4 id="连接点-Joinpoint"><a href="#连接点-Joinpoint" class="headerlink" title="连接点(Joinpoint)"></a>连接点(Joinpoint)</h4><ul><li><input disabled="" type="checkbox"> getSignature 获取目标方法的签名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 开始一直到&#123;&#125;之前</span><br></pre></td></tr></table></figure><h4 id="全注解开发AOP"><a href="#全注解开发AOP" class="headerlink" title="全注解开发AOP"></a>全注解开发AOP</h4><ul><li><input disabled="" type="checkbox"> 编写一个类来代替spring配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.powernode.spring6.service&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Configuration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 因为xml文件没了 所以生成对象的时候也要有所变化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAOPWithAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Configuration.class);</span><br><span class="line">    <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderService&quot;</span>, OrderService.class);</span><br><span class="line">    orderService.generate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-对事务的支持"><a href="#spring-对事务的支持" class="headerlink" title="spring 对事务的支持"></a>spring 对事务的支持</h2><h3 id="事务概述"><a href="#事务概述" class="headerlink" title="事务概述"></a>事务概述</h3><ul><li>什么是事务<ul><li>在一个业务流程当中，通常需要多条DML（insert delete update）语句共同联合才能完成，这多条DML语句必须同时成功，或者同时失败，这样才能保证数据的安全。</li><li>多条DML要么同时成功，要么同时失败，这叫做事务。</li><li>事务：Transaction（tx）</li></ul></li><li>事务的四个处理过程：<ul><li>第一步：开启事务 (start transaction)</li><li>第二步：执行核心业务代码</li><li>第三步：提交事务（如果核心业务处理过程中没有出现异常）(commit transaction)</li><li>第四步：回滚事务（如果核心业务处理过程中出现异常）(rollback transaction)</li></ul></li><li>事务的四个特性：<ul><li>A 原子性：事务是最小的工作单元，不可再分。</li><li>C 一致性：事务要求要么同时成功，要么同时失败。事务前和事务后的总量不变。</li><li>I 隔离性：事务和事务之间因为有隔离性，才可以保证互不干扰。</li><li>D 持久性：持久性是事务结束的标志。</li></ul></li></ul><h3 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h3><ul><li><input disabled="" type="checkbox"> 在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure><p>一共有七种传播行为：</p><ul><li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)【没有就新建，有就加入】</li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】</li><li>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】</li><li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</li><li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】</li><li>NEVER：以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】</li><li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】</li></ul><h3 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h3><ul><li>脏读：读取到没有提交到数据库的数据(缓存中的数据)，叫做脏读。</li><li>不可重复读：在同一个事务当中，第一次和第二次读取的数据不一样。</li><li>幻读：读到的数据是假的。多事务并发一定会产生幻读问题。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 其中可以设置的隔离级别有以下四种</li></ul></blockquote></blockquote><ul><li>Default</li><li>read_uncommitted</li><li>READ_COMMITTED</li><li>repeatable_read</li><li>serializable</li></ul><h3 id="事物超时"><a href="#事物超时" class="headerlink" title="事物超时"></a>事物超时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 10)</span></span><br></pre></td></tr></table></figure><ul><li>以上代码表示设置事务的超时时间为10秒。</li><li>表示超过10秒如果该事务中所有的DML语句还没有执行完毕的话，最终结果会选择回滚。</li><li>默认值-1，表示没有时间限制。</li><li>这里有个坑，事务的超时时间指的是哪段时间？:在当前事务当中，最后一条DML语句执行<code>之前</code>的时间。如果最后一条DML语句后面很有很多业务逻辑，这些业务代码执行的时间不被计入超时时间。</li></ul><h3 id="只读事务"><a href="#只读事务" class="headerlink" title="只读事务"></a>只读事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br></pre></td></tr></table></figure><ul><li>将当前事务设置为只读事务，在该事务执行过程中只允许select语句执行，delete insert update均不可执行。<br>该特性的作用是：启动spring的优化策略。提高select语句执行效率。<br>如果该事务中确实没有增删改操作，建议设置为只读事务。</li></ul><h3 id="设置哪些异常回滚事务"><a href="#设置哪些异常回滚事务" class="headerlink" title="设置哪些异常回滚事务"></a>设置哪些异常回滚事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = RuntimeException.class)</span></span><br></pre></td></tr></table></figure><ul><li>表示只有发生RuntimeException异常或该异常的子类异常才回滚。</li></ul><h3 id="设置哪些异常不回滚事务"><a href="#设置哪些异常不回滚事务" class="headerlink" title="设置哪些异常不回滚事务"></a>设置哪些异常不回滚事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = NullPointerException.class)</span></span><br></pre></td></tr></table></figure><p>表示发生NullPointerException或该异常的子类异常不回滚，其他异常则回滚。</p><h3 id="事务的全注解开发"><a href="#事务的全注解开发" class="headerlink" title="事务的全注解开发"></a>事务的全注解开发</h3><p>编写一个类来代替配置文件</p><h2 id="Spring6整合JUnit5"><a href="#Spring6整合JUnit5" class="headerlink" title="Spring6整合JUnit5"></a>Spring6整合JUnit5</h2><h3 id="Spring对JUnit4的支持"><a href="#Spring对JUnit4的支持" class="headerlink" title="Spring对JUnit4的支持"></a>Spring对JUnit4的支持</h3><p>:wq<br>Spring提供的方便主要是这几个注解：</p><ul><li><p>@RunWith(SpringJUnit4ClassRunner.class)</p></li><li><p>@ContextConfiguration(“classpath:spring.xml”)</p></li><li><p>在单元测试类上使用这两个注解之后，在单元测试类中的属性上可以使用@Autowired。比较方便。</p></li></ul><h3 id="Spring对JUnit5的支持"><a href="#Spring对JUnit5的支持" class="headerlink" title="Spring对JUnit5的支持"></a>Spring对JUnit5的支持</h3><p>在JUnit5当中，可以使用Spring提供的以下两个注解，标注到单元测试类上，这样在类当中就可以使用@Autowired注解了。</p><ul><li>@ExtendWith(SpringExtension.class)</li><li>@ContextConfiguration(“classpath:spring.xml”)</li></ul><h2 id="Spring6集成MyBatis3-5"><a href="#Spring6集成MyBatis3-5" class="headerlink" title="Spring6集成MyBatis3.5"></a>Spring6集成MyBatis3.5</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 接口定义的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 实现接口定义的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的其余部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 在这个例子中，AccountMapper 是一个接口，AccountMapperImpl 是实现了这个接口的类。在 AccountService 类中，通过 @Autowired 注解将 accountMapper 字段注入为 AccountMapper 接口的实现类的一个实例。</li></ul><h2 id="spring中的八大模式"><a href="#spring中的八大模式" class="headerlink" title="spring中的八大模式"></a>spring中的八大模式</h2><h3 id="简单工厂模式-1"><a href="#简单工厂模式-1" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>BeanFactory的getBean()方法，通过唯一标识来获取Bean对象。是典型的简单工厂模式（静态工厂模式）；</p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>FactoryBean是典型的工厂方法模式。在配置文件中通过factory-method属性来指定工厂方法，该方法是一个实例方法。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>Spring用的是双重判断加锁的单例模式。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>Spring的AOP就是使用了动态代理实现的。</p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>JavaSE中的IO流是非常典型的装饰器模式。</p><p>Spring 中配置 DataSource 的时候，这些dataSource可能是各种不同类型的，比如不同的数据库：Oracle、SQL Server、MySQL等，也可能是不同的数据源：比如apache 提供的org.apache.commons.dbcp.BasicDataSource、spring提供的org.springframework.jndi.JndiObjectFactoryBean等。</p><p>这时，能否在尽可能少修改原有类代码下的情况下，做到动态切换不同的数据源？此时就可以用到装饰者模式。</p><p>Spring根据每次请求的不同，将dataSource属性设置成不同的数据源，以到达切换数据源的目的。</p><p><strong>Spring中类名中带有：Decorator和Wrapper单词的类，都是装饰器模式。</strong></p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>定义对象间的一对多的关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。Spring中观察者模式一般用在listener的实现</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式是行为性模式，调用不同的方法，适应行为的变化 ，强调父类的调用子类的特性 。</p><p>getHandler是HandlerMapping接口中的唯一方法，用于根据请求找到匹配的处理器。</p><p>比如我们自己写了AccountDao接口，然后这个接口下有不同的实现类：AccountDaoForMySQL，AccountDaoForOracle。对于service来说不需要关心底层具体的实现，只需要面向AccountDao接口调用，底层可以灵活切换实现，这就是策略模式。</p><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>Spring中的JdbcTemplate类就是一个模板类。它就是一个模板方法设计模式的体现。在模板类的模板方法execute中编写核心算法，具体的实现步骤在子类中完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;h2 id=&quot;Spring启示录&quot;&gt;&lt;a href=&quot;#Spring启示录&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
</feed>
